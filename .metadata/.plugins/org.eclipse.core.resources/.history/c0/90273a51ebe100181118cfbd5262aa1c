import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.*;
import java.io.*; 
public class DataParser {
	String sourcefile;
	String[] validDays = {"MO", "TU", "FR"};
	String[] validTimes = {"8:00", "8:30", "9:00", "9:30", "10:00", "10:30"};
	String[] validClassType = {"LEC", "TUT", "LAB"};
	String[] validTutType = {"TUT", "LAB"};
	String[] validSectionNum = {"01", "02", "03", "04", "05", "06", "07", "09"};
	
	public DataParser(String infile) {
		if(infile == "") {
			sourcefile = "E:\\CPSC433\\testCase1.txt";
		}else {
			sourcefile = infile;
		}
	}
	
	//This method reads the file and adds data to the file data object and returns everything from the input file into
	//a format for the program to read and do optimization on.
	public FileData readfile() throws IOException {
		File file = new File(sourcefile);
		FileData dataOutput = new FileData();
		int rowNum = 0;
		BufferedReader br;
		try {
		br = new BufferedReader(new FileReader(file));
		}catch(FileNotFoundException e) {
			System.out.println(e.getMessage());
			return null;
		}
		String line;
		while ((line = br.readLine()) != null){
			rowNum++;
			//Switch to bounce between different data sets
			switch(line){
			case "Name:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.setName(line);
				}
				break;
			case "Course slots:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getCourseSlots().add(readCourseSlot(line, rowNum));
				}
				break;
			case "Lab slots:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getLabSlots().add(readCourseSlot(line, rowNum));
				}
				break;
			case "Courses:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getCourses().add(readCourseLine(line, rowNum));
				}
				break;
			case "Labs:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getLabs().add(readCourseLine(line, rowNum));
				}
				break;
			case "Not compatible:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getIncompatible().add(readCoursePair(line, rowNum));
				}
				break;
			case "Unwanted:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getUnwanted().add(readTimeCoursePair(line, rowNum));
				}
				break;
			case "Preferences:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getPreferences().add(readTimeCoursePair(line));
				}
				break;
			case "Pair:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getPair().add(readCoursePair(line));
				}
				break;
			case "Partial assignments:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getPreAssigned().add(readTimeCoursePair(line));
				}
				break;
			}
		}
		return dataOutput;
	}
	
	//Overload for possibility of directly throwing in a file path
	public void readfile(String infile) throws IOException {
		sourcefile = infile;
		readfile();
	}
	
	//Method for reading a line that contains a course or lab data set
	private courseItem readCourseLine(String input, int rowNum) {
		courseItem outCL;
		String[] dataSet = input.split(" ");
		if(!Arrays.stream(validClassType).anyMatch(dataSet[2]::equals)){
			throw new IllegalArgumentException("Invalid input " + dataSet[2] + " is not a valid Class type on row: " + rowNum);
		}
		try{
			int temp = Integer.parseInt(dataSet[1]);
			if((temp < 100)||(temp > 999)){
				throw new IllegalArgumentException("Invalid input " + dataSet[1] + " is not a valid course number on row: " + rowNum);
			}
		}catch(NumberFormatException e){
			throw new IllegalArgumentException("Invalid course number " + dataSet[1] + " on row: " + rowNum);
		}
		if(dataSet.length == 4){
			outCL = new courseItem(dataSet[0], dataSet[1], dataSet[2], dataSet[3]);
		}
		else if (dataSet.length == 6){
			outCL = new courseItem(dataSet[0], dataSet[1], dataSet[2], dataSet[3], dataSet[4], dataSet[5]);
		}
		else{
			throw new IllegalArgumentException("Unexpected number of arguments (" + dataSet.length + ") for Course: " + input + " on row: " + rowNum);
		}
		return outCL;
	}
	
	//Method for reading a line that contains a slot data set
	private Slot readCourseSlot(String input, int rowNum){
		Slot outSlot = new outSlot();
		String[] dataSet = input.split(" ");
		return outSlot
	}
	
	//Method for reading a line that contains a pair of courses
	private CoursePair readCoursePair(String input, int rowNum){
		CoursePair localOutput;
		localOutput = new CoursePair();
		return localOutput;
	}
	
	//Method for reading a line that contains a pair of time and course data sets.
	private TimeCoursePair readTimeCoursePair(String input, int rowNum){
		return new TimeCoursePair();
	}
	
	
}
