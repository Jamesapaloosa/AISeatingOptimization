import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.*;
import java.io.*; 
public class DataParser {
	String sourcefile;
	String[] validDays = {"MO", "TU", "FR"};
	String[] validTimes = {"8:00", "8:30", "9:00", "9:30", "10:00", "10:30"};
	String[] validClassType = {"LEC", "TUT", "LAB"};
	String[] validTutType = {"TUT", "LAB"};
	String[] validSectionNum = {"01", "02", "03", "04", "05", "06", "07", "09"};
	String[] invalidDepartmentChar = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "?"};
	
	public DataParser(String infile) {
		if(infile == "") {
			sourcefile = "E:\\CPSC433\\testCase1.txt";
		}else {
			sourcefile = infile;
		}
	}
	//------------------------------------------------------------------------------------------------------------
	//This method reads the file and adds data to the file data object and returns everything from the input file into
	//a format for the program to read and do optimization on.
	public FileData readfile() throws IOException {
		File file = new File(sourcefile);
		FileData dataOutput = new FileData();
		int rowNum = 0;
		BufferedReader br;
		try {
		br = new BufferedReader(new FileReader(file));
		}catch(FileNotFoundException e) {
			System.out.println(e.getMessage());
			return null;
		}
		String line;
		while ((line = br.readLine()) != null){
			rowNum++;
			//Switch to bounce between different data sets
			switch(line){
			case "Name:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.setName(line);
				}
				break;
			case "Course slots:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getCourseSlots().add(readCourseSlot(line, rowNum));
				}
				break;
			case "Lab slots:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getLabSlots().add(readCourseSlot(line, rowNum));
				}
				break;
			case "Courses:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getCourses().add(readCourseLine(line, rowNum));
				}
				break;
			case "Labs:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getLabs().add(readCourseLine(line, rowNum));
				}
				break;
			case "Not compatible:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getIncompatible().add(readCoursePair(line, rowNum));
				}
				break;
			case "Unwanted:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getUnwanted().add(readTimeCoursePair(line, rowNum));
				}
				break;
			case "Preferences:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getPreferences().add(readTimeCoursePair(line, rowNum));
				}
				break;
			case "Pair:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getPair().add(readCoursePair(line, rowNum));
				}
				break;
			case "Partial assignments:":
				while((line != "\n")||(line != "\r")||(line != null)){
					line = br.readLine();
					rowNum++;
					dataOutput.getPreAssigned().add(readTimeCoursePair(line, rowNum));
				}
				break;
			}
		}
		return dataOutput;
	}
	//------------------------------------------------------------------------------------------------------------
	//Overload for possibility of directly throwing in a file path
	public void readfile(String infile) throws IOException {
		sourcefile = infile;
		readfile();
	}
	//------------------------------------------------------------------------------------------------------------
	//Method for reading a line that contains a course or lab data set
	private courseItem readCourseLine(String input, int rowNum) {
		courseItem outCL;
		String[] dataSet = input.split(" ");
		//Type verification for each of the input types
		if(!Arrays.stream(validClassType).anyMatch(dataSet[2]::equals))
			throw new IllegalArgumentException("Invalid input " + dataSet[2] + " is not a valid Class type on row: " + rowNum);
		try{
			int temp = Integer.parseInt(dataSet[1]);
			if((temp < 100)||(temp > 999))
				throw new IllegalArgumentException("Invalid input " + dataSet[1] + " is not a valid course number on row: " + rowNum);
		}catch(NumberFormatException e){
			throw new IllegalArgumentException("Invalid course number " + dataSet[1] + " on row: " + rowNum);
		}
		if((dataSet[0].length() != 4)||(Arrays.stream(invalidDepartmentChar).anyMatch(dataSet[0]::equals)))
			throw new IllegalArgumentException("Invalid department input " + dataSet[0] + " on row: " + rowNum);
		if((!Arrays.stream(validSectionNum).anyMatch(dataSet[3]::equals))||(Integer.parseInt(dataSet[3]) > 100))
			throw new IllegalArgumentException("Invalid Section number: " + dataSet[3] + " on row: " + rowNum);
		
		//Create a new course item based on the amount of data provided.
		if(dataSet.length == 4)
			outCL = new courseItem(dataSet[0], dataSet[1], dataSet[2], dataSet[3]);
		else if (dataSet.length == 6){
			//Type verification if there are the two extra data points
			if(!Arrays.stream(validTutType).anyMatch(dataSet[4]::equals))
				throw new IllegalArgumentException("Invalid type for the lab: " + dataSet[4] + " on row: " + rowNum);
			if((!Arrays.stream(validSectionNum).anyMatch(dataSet[5]::equals))||(Integer.parseInt(dataSet[5]) > 100))
				throw new IllegalArgumentException("Invalid Section number: " + dataSet[5] + " on row: " + rowNum);
			outCL = new courseItem(dataSet[0], dataSet[1], dataSet[2], dataSet[3], dataSet[4], dataSet[5]);
		}
		else{
			throw new IllegalArgumentException("Unexpected number of arguments (" + dataSet.length + ") for Course: " + input + " on row: " + rowNum);
		}
		return outCL;
	}
	//------------------------------------------------------------------------------------------------------------
	//Method for reading a line that contains a slot data set 
	private Slot readCourseSlot(String input, int rowNum){
		Slot outSlot;
		String[] dataSet = input.split(" ");
		if(dataSet.length != 4)
			throw new IllegalArgumentException("The number of arguments found in row: " + rowNum + " is incorrect.");
		if(!Arrays.stream(validDays).anyMatch(dataSet[0]::equals))
			throw new IllegalArgumentException("Invalid format for day found in: " + dataSet[0] + " in row: " + rowNum);
		if(!Arrays.stream(validTimes).anyMatch(dataSet[1]::equals))
			throw new IllegalArgumentException("Invalid format for time found in: " + dataSet[1] + " in row: " + rowNum);
		int tempMax = Integer.parseInt(dataSet[2]);
		int tempMin = Integer.parseInt(dataSet[3]);
		if(tempMax < tempMin)
			throw new IllegalArgumentException("The format for the max and min for a slot are invalid: " + dataSet[2] + ", " + dataSet[3] + "in row: " + rowNum);
		outSlot = new Slot(tempMax, tempMin, dataSet[1], dataSet[0]);
		return outSlot;
	}
	//------------------------------------------------------------------------------------------------------------
	//Method for reading a line that contains a pair of courses
	private CoursePair readCoursePair(String input, int rowNum){
		String[] dataSet = input.split(",");
		if(dataSet.length != 2)
			throw new IllegalArgumentException("Unexpected number of arguments in row: " + rowNum);
		courseItem ItemOne = readCourseLine(dataSet[0], rowNum);
		courseItem ItemTwo = readCourseLine(dataSet[1], rowNum); 
		return new CoursePair(ItemOne, ItemTwo);
	}
	//------------------------------------------------------------------------------------------------------------
	//Method for reading a line that contains a pair of time and course data sets.
	private TimeCoursePair readTimeCoursePair(String input, int rowNum){
		String day = "";
		String time = "";
		int classIndex = 0;
		String[] dataSet = input.split(",");
		if(dataSet.length != 3)
			throw new IllegalArgumentException("Unexpected number of arguments in row: " + rowNum);
		for(int i = 0; i < dataSet.length; i++){
			if((Arrays.stream(validDays).anyMatch(dataSet[i]::equals))){
				day = dataSet[i];
				if(Arrays.stream(validTimes).anyMatch(dataSet[i + 1]::equals))
					time = dataSet[i+ 1];
				if(i == 0)
					classIndex = i + 2;
				else
					classIndex = i - 1;
				break;
			}
		}
		if((day == "")||(time == "")){
			throw new IllegalArgumentException("Valid day or time were not found for row: " + rowNum);
		}
		
		return new TimeCoursePair(new Slot(0, 0, time, day), readCourseLine(dataSet[classIndex], rowNum));
	}
	
	
}
